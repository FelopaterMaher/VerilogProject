module half_adder(output sum, output carry, input a, input b);
   xor(sum, a, b);
   and(carry, a, b);
endmodule

module full_adder(output sum, output carry, input x, input y, input z);
   wire s1, c1, c2;
   half_adder h1(s1, c1, x, y);
   half_adder h2(sum, c2, s1, z);
   or(carry, c1, c2);
endmodule


module mux4to1 #(parameter W = 3) (
    input [W-1:0] input0, 
    input [W-1:0] input1,  
    input [W-1:0] input2,
    input [W-1:0] input3,  
    input [1:0] sel,          
    output reg [W-1:0] outtput  
);
    always @(*)
        case (sel)
            2'b00: outtput = input0;
            2'b01: outtput = input1;
            2'b10: outtput = input2;
            2'b11: outtput = input3;
            default: outtput = input0;
        endcase
endmodule

module mux2to1 #(parameter w = 3) (
    input [w-1:0] input0,  
    input [w-1:0] input1, 
    input sel,                
    output reg [w-1:0] outtput 
);
    always @(*)
        case (sel)
            1'b0: outtput = input0;
            1'b1: outtput = input1;
            default: outtput = input0; 
        endcase
endmodule